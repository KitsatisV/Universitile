@page "/Dashboard"
@using System.Text;
@using MySql.Data.MySqlClient;
@using System.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>Dashboard</PageTitle>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300i,400" rel="stylesheet">
</head>

<body>
    <div class="row">
        <AuthorizeView Roles="Student, Teacher">
            <Authorized>
                <div class="col-8">
                    <RadzenScheduler Data="@events" TItem="Session" StartProperty="DateStart" EndProperty="DateEnd" TextProperty="Tittle">
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                        <RadzenYearView />
                    </RadzenScheduler>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView  Roles="Student, Teacher">
            <Authorized>
				<div class="col-4" style="color: white">
					<MudCarousel Class="mud-width-full" ItemsSource="@myModules" @bind-SelectedIndex="selectedIndexModule" Style="height:400px; background-color:#12080c; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
						<ItemTemplate>
							<div class="d-flex flex-column flex-column justify-center" style="height:100%">
								<RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#12080c">
									<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
										<RadzenStack Gap="0" Style="align-self:center">
											<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Module</b></RadzenText>
											<RadzenText TextStyle="TextStyle.Body1"><b>@myContext.ModuleName</b></RadzenText>
										</RadzenStack>
									</RadzenStack>
									<RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
										<RadzenRow RowGap="0">
											<RadzenColumn SizeXS="8">
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">School</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1">@myContext.School</RadzenText>*@
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Direction</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1">@myContext.Direction</RadzenText>*@
											</RadzenColumn>
											<RadzenColumn SizeXS="4">
												<RadzenButton Variant="Radzen.Variant.Text" Text="Go to module's page'" Size="ButtonSize.Medium" />
											</RadzenColumn>
										</RadzenRow>
									</RadzenCard>
									<br />
									<br />
								</RadzenCard>
							</div>
						</ItemTemplate>
					</MudCarousel>
				</div>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="row">
        <AuthorizeView Roles="Student, Teacher">
            <Authorized>
				<div class="col-8" style="color:white">
					<RadzenDataList WrapItems="false" AllowPaging="false" Data="@announcements" Count="@announcements.Count()" TItem="Announcement" Style="height:400px; overflow-y:scroll;">
						<Template Context="announcement">
							<MudCard Style="background-color:#13181b; color:aliceblue">
								<MudCardContent>
									@if (announcement.Importance)
									{
                                        <MudBadge Dot="false" Color="Color.Error" Icon="@Icons.Material.TwoTone.ErrorOutline" Class="my-auto" Origin="Origin.TopLeft" Visible="@(!announcement.UsersHasAnnouncements.Any(u => u.IsRead == true))">
											<MudText><b>@announcement.Message</b></MudText>
										</MudBadge>
									}
									else
									{
										<MudBadge Dot="true" Color="Color.Success" Class="my-auto" Origin="Origin.TopLeft" Visible="@(!announcement.UsersHasAnnouncements.Any(u => u.IsRead == true))">
											<MudText><b>@announcement.Message</b></MudText>
										</MudBadge>
									}
									@*<MudText Typo="Typo.body2">@announcement.Message</MudText>*@
								</MudCardContent>
							</MudCard>
						</Template>
					</RadzenDataList>
				</div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="Student">
            <Authorized>
				<div class="col-4" style="color: white">
                    <MudCarousel Class="mud-width-full" @ref="_carouselTeachers" ItemsSource="@personalInfo" @bind-SelectedIndex="selectedIndexTeachers" Style="height:400px; background-color:#000901; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
						<ItemTemplate>
							<div class="d-flex flex-column flex-column justify-center" style="height:100%">
								<RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#000901">
									<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
										<MudAvatar Style="height:100px; width:100px">@myContext.FirstName.First()@myContext.LastName.First()</MudAvatar>
										<RadzenStack Gap="0" Style="align-self:center">
											<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Teacher</b></RadzenText>
											<RadzenText TextStyle="TextStyle.Body1"><b>@myContext.FirstName @myContext.LastName</b></RadzenText>
											@*<RadzenText TextStyle="TextStyle.Body2">@myContext.Department</RadzenText>*@
										</RadzenStack>
									</RadzenStack>
									<RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
										<RadzenRow RowGap="0">
											<RadzenColumn SizeXS="8">
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Email</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1" style="color:dodgerblue">@myContext.Aspnetusers.Email</RadzenText>*@
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Modules</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1">@myContext.Modules</RadzenText>*@
											</RadzenColumn>
											<RadzenColumn SizeXS="4">
												<RadzenButton Variant="Radzen.Variant.Text" Text="Email" Size="ButtonSize.Small" />
												<RadzenButton Variant="Radzen.Variant.Text" Text="Live Chat" Size="ButtonSize.Small" />
											</RadzenColumn>
										</RadzenRow>
									</RadzenCard>
									<br />
									<br />
								</RadzenCard>
							</div>
						</ItemTemplate>
					</MudCarousel>
				</div>
			</Authorized>
		</AuthorizeView>
		<AuthorizeView Roles="Teacher">
            <Authorized>
				<div class="col-4" style="color: white">
                    <MudCarousel Class="mud-width-full" @ref="_carouselTeachers" ItemsSource="@personalInfo" @bind-SelectedIndex="selectedIndexTeachers" Style="height:400px; background-color:#000901; min-width:fit-content; max-width:489px; justify-self:center" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false" Context="myContext">
						<ItemTemplate>
							<div class="d-flex flex-column flex-column justify-center" style="height:100%">
								<RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width:480px; height:100%; background-color:#000901">
									<RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
										<MudAvatar Style="height:100px; width:100px">@myContext.FirstName.First()@myContext.LastName.First()</MudAvatar>
										<RadzenStack Gap="0" Style="align-self:center">
											<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Student</b></RadzenText>
											<RadzenText TextStyle="TextStyle.Body1"><b>@myContext.FirstName @myContext.LastName</b></RadzenText>
											@*<RadzenText TextStyle="TextStyle.Body2">@myContext.Department</RadzenText>*@
										</RadzenStack>
									</RadzenStack>
									<RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:61.2%; width:100%">
										<RadzenRow RowGap="0">
											<RadzenColumn SizeXS="8">
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Email</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1" style="color:dodgerblue">@myContext.Aspnetusers.Email</RadzenText>*@
												<RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Modules</RadzenText>
												@*<RadzenText TextStyle="TextStyle.Body1">@myContext.Modules</RadzenText>*@
											</RadzenColumn>
											<RadzenColumn SizeXS="4">
												<RadzenButton Variant="Radzen.Variant.Text" Text="Email" Size="ButtonSize.Small" />
												<RadzenButton Variant="Radzen.Variant.Text" Text="Live Chat" Size="ButtonSize.Small" />
											</RadzenColumn>
										</RadzenRow>
									</RadzenCard>
									<br />
									<br />
								</RadzenCard>
							</div>
						</ItemTemplate>
					</MudCarousel>
				</div>
			</Authorized>
		</AuthorizeView>
    </div>
</body>

@code {

    private string userId;
    private List<Session> events = new List<Session>();
    private List<Module> modules = new List<Module>();
    private int selectedIndexModule;
    private MudCarousel<Module> _carouselmodules;
    private List<PersonalInfo> personalInfo = new List<PersonalInfo>();
    private MudCarousel<PersonalInfo> _carouselTeachers;// idk
    private int selectedIndexTeachers = 0;
    private List<Announcement> announcements = new List<Announcement>();
    private List<Module> myModules = new List<Module>();
    private string connect = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var userId = getUserId();
        events = await Db.Sessions.ToListAsync();
        modules = await Db.Modules.ToListAsync();
        announcements = await Db.Announcements
            .Include(a => a.UsersHasAnnouncements)
            .Where(a => a.UsersHasAnnouncements.Any(u => u.AspnetusersId == userId.ToString()))
            .ToListAsync();

        //Get User's username
        async Task<string> getUserName()
        {
            var user = (await authenticationStateTask).User;
            return user.Identity.Name;
        }

        //Get User's role
        //async Task<string> getRole()
        //{
        //    return ((await authenticationStateTask).User.IsInRole("Teacher")) ? "Teacher" : "Student";
        //}

        //Get User's userID
        async Task<string> getUserId()
        {
            var user = (await authenticationStateTask).User;
            var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            return userid;
        }

        //Get Teachers Modules
        MySql.Data.MySqlClient.MySqlConnection connection = new MySql.Data.MySqlClient.MySqlConnection(connect);
        string dashteachsql = "SELECT m.* FROM modules m INNER JOIN teachers s ON m.module_id = s.modules_module_id INNER JOIN aspnetusers u ON s.aspnetusers_Id = u.Id WHERE u.Id ='" + userId.Result.ToString() + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(dashteachsql, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(dashteachsql, connection);
            sqlcmd.CommandText = dashteachsql;
            sqlcmd.CommandType = CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {

                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
                myModules.Add(mod);
            }
            // always call Close when done reading.
            rdr.Close();
            // Close the connection when done with it.
            connection.Close();
        }

        //Get announcements
        string annsql = "SELECT a.Message, a.date,announcements_id, a.Importance FROM announcements a JOIN users_has_announcements uha ON a.announcements_id = uha.announcements_announcements_id JOIN aspnetusers u ON uha.aspnetusers_Id = u.Id WHERE u.Id ='" + userId.Result.ToString() + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(dashteachsql, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(annsql, connection);
            sqlcmd.CommandText = annsql;
            sqlcmd.CommandType = CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Announcement ann = new Announcement();
                ann.AnnouncementsId = (Int32)rdr["announcements_id"];
                ann.Date = (DateTime)rdr["date"];
                ann.Message = rdr["Message"].ToString();
                ann.Importance = (Boolean)rdr["Importance"];
                announcements.Add(ann);
            }
            rdr.Close();
            connection.Close();
        }

        //Get Student Modules
        string dashstsql = "SELECT m.* FROM modules m INNER JOIN courses c ON c.course_id = m.courses_course_id INNER JOIN students s ON s.courses_course_id = c.course_id INNER JOIN aspnetusers u ON u.Id = s.aspnetusers_Id WHERE u.Id = '" + userId.Result.ToString() + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(dashstsql, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(dashstsql, connection);
            sqlcmd.CommandText = dashstsql;
            sqlcmd.CommandType = CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {

                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
                myModules.Add(mod);
            }
            rdr.Close();
            connection.Close();
        }

        //Get Teachers
        string teachsql = "SELECT pi.* FROM personal_info pi INNER JOIN students s ON s.aspnetusers_Id = pi.aspnetusers_Id INNER JOIN courses c ON c.course_id = s.courses_course_id INNER JOIN modules m ON m.courses_course_id = c.course_id INNER JOIN teachers t ON t.modules_module_id = m.module_id WHERE t.aspnetusers_Id ='" + userId.Result.ToString() + "'";
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(teachsql, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(teachsql, connection);
            sqlcmd.CommandText = teachsql;
            sqlcmd.CommandType = CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                PersonalInfo teach = new PersonalInfo();
                teach.InfoId = (Int32)rdr["info_id"];
                var date = DateOnly.FromDateTime((DateTime)rdr["date_of_birth"]);
                teach.DateOfBirth = date;
                teach.Sex = (sbyte)rdr["sex"];
                teach.FirstName = rdr["first_name"].ToString();
                teach.LastName = rdr["last_name"].ToString();
                teach.MiddleName = rdr["middle_name"].ToString();
                teach.Landline = rdr["landline"].ToString();
                teach.Mobile = rdr["mobile"].ToString();
                teach.AspnetusersId = rdr["aspnetusers_Id"].ToString();
                if(!personalInfo.Any(personalInfo=>personalInfo.InfoId == teach.InfoId))
                    personalInfo.Add(teach);
            }
            rdr.Close();
            connection.Close();
        }

        //Get Students
        string studsql = "SELECT pi.* FROM personal_info pi JOIN teachers t ON pi.aspnetusers_Id = t.aspnetusers_Id JOIN modules m ON t.modules_module_id = m.module_id JOIN courses c ON m.courses_course_id = c.course_id JOIN students s ON c.course_id = s.courses_course_id AND s.aspnetusers_Id ='" + userId.Result.ToString() + "'";//query
        using (MySql.Data.MySqlClient.MySqlCommand command = new MySql.Data.MySqlClient.MySqlCommand(studsql, connection))
        {
            connection.Open();
            MySql.Data.MySqlClient.MySqlCommand sqlcmd = new MySql.Data.MySqlClient.MySqlCommand(studsql, connection);
            sqlcmd.CommandText = studsql;
            sqlcmd.CommandType = CommandType.Text;
            MySql.Data.MySqlClient.MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                PersonalInfo stud = new PersonalInfo();
                stud.InfoId = (Int32)rdr["info_id"];
                var date = DateOnly.FromDateTime((DateTime)rdr["date_of_birth"]);
                stud.DateOfBirth = date;
                stud.Sex = (sbyte)rdr["sex"];
                stud.FirstName = rdr["first_name"].ToString();
                stud.LastName = rdr["last_name"].ToString();
                stud.MiddleName = rdr["middle_name"].ToString();
                stud.Landline = rdr["landline"].ToString();
                stud.Mobile = rdr["mobile"].ToString();
                stud.AspnetusersId = rdr["aspnetusers_Id"].ToString();
                if (!personalInfo.Any(personalInfo => personalInfo.InfoId == stud.InfoId))
                    personalInfo.Add(stud);
            }
            rdr.Close();
            connection.Close();
        }
    }
}
