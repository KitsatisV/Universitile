@page "/Modules"
@using Universitile01.Models;
@using System.Text;
@using Universitile01.Data;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider



<PageTitle>Modules</PageTitle>

<body>
    <AuthorizeView Roles="Student, Teacher">
        <Authorized>
            <RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="Radzen.AlignItems.Center" Gap="0" Style="background-image:linear-gradient(180deg, rgb(83, 80, 56) 0%, #1d1d1d 90%) ">
                @foreach (Module module in stModules)
                {
                    PersonalInfo teacher = moduleTeacherMap.ContainsKey(module.ModuleId) ? moduleTeacherMap[module.ModuleId] : null;
                    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
                        <RadzenColumn Size="12" Style="justify-self:center; align-self:center">
                            <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:480px; height:355px; background-color:#12080c">
                                <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" Gap="1rem" Class="rz-p-4">
                                    <RadzenStack Gap="0" Style="align-self:center">
                                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0"><b>Module</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1"><b>@module.ModuleName</b></RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2">@module.ModuleId</RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                                <RadzenCard class="rz-background-color-danger-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="height:225px; width:100%">
                                    <RadzenRow RowGap="0">
                                        <RadzenColumn SizeXS="8">
                                         <AuthorizeView Roles="Student">
                                             <Authorized Context="t">
                                                 <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Instructor</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body1">@teacher.FirstName @teacher.LastName</RadzenText>
                                             </Authorized>
                                         </AuthorizeView>
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Module Info</RadzenText>
                                        </RadzenColumn>
                                        <RadzenColumn SizeXS="4">
                                            <MudButton Variant="@MudBlazor.Variant.Outlined" Style="width:100%; margin-top:9px" Color="Color.Secondary" OnClick="() => AssignmentsDialog(asgnModules)">Assignemnt</MudButton>
                                            <MudButton Variant="@MudBlazor.Variant.Outlined" Style="width:100%; margin-top:9px" Color="Color.Secondary" OnClick="() => TakeQuizDialog(quizModules)">Quiz</MudButton>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                                <br />
                                <br />
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                }
            </RadzenRow>
        </Authorized>
    </AuthorizeView>

</body>

@code {
    private string userId;
    private string connect = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<Module> stModules = new List<Module>();
    private List<LinksQuiz> quizModules = new List<LinksQuiz>() ;
    private List<LinksAssignment> asgnModules = new List<LinksAssignment>();
    private List<PersonalInfo> teachInfo = new List<PersonalInfo>();
    private Dictionary<int, PersonalInfo> moduleTeacherMap = new Dictionary<int, PersonalInfo>();
    @inject IDialogService DialogService


    protected override async Task OnInitializedAsync()
    {

        var userId = getUserId();
        async Task<string> getUserName()
        {
            var user = (await authenticationStateTask).User;
            return user.Identity.Name;
        }
        async Task<string> getUserId()
        {
            var user = (await authenticationStateTask).User;
            var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            return userid;
        }
        MySqlConnection connection = new MySqlConnection(connect);
        string combinedSql = "SELECT m.*, pi.first_name, pi.last_name, pi2.first_name AS teacher_first_name, pi2.last_name AS teacher_last_name FROM modules m INNER JOIN courses c ON c.course_id = m.courses_course_id INNER JOIN students s ON s.courses_course_id = c.course_id INNER JOIN aspnetusers u ON u.Id = s.aspnetusers_Id INNER JOIN teachers t ON t.modules_module_id = m.module_id INNER JOIN personal_info pi ON pi.aspnetusers_Id = s.aspnetusers_Id INNER JOIN personal_info pi2 ON pi2.aspnetusers_Id = t.aspnetusers_Id WHERE u.Id ='" + userId.Result.ToString() + "'";
        using (MySqlCommand command = new MySqlCommand(combinedSql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(combinedSql, connection);
            sqlcmd.CommandText = combinedSql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
                stModules.Add(mod);

                PersonalInfo prsinf = new PersonalInfo();
                prsinf.FirstName = rdr["teacher_first_name"].ToString();
                prsinf.LastName = rdr["teacher_last_name"].ToString();

                if (!moduleTeacherMap.ContainsKey(mod.ModuleId))
                {
                    moduleTeacherMap.Add(mod.ModuleId, prsinf);
                }


                if (!teachInfo.Any(personalInfo => personalInfo.FirstName == prsinf.FirstName && personalInfo.LastName == prsinf.LastName))
                    teachInfo.Add(prsinf);
            }

            rdr.Close();
            connection.Close();
        }
        string combinedTSql = "SELECT m.* FROM modules m  INNER JOIN teachers t ON t.modules_module_id = m.module_id INNER JOIN aspnetusers u ON u.Id = t.aspnetusers_Id WHERE u.Id = '" + userId.Result.ToString() + "'";
        using (MySqlCommand command = new MySqlCommand(combinedTSql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(combinedTSql, connection);
            sqlcmd.CommandText = combinedTSql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
                stModules.Add(mod);


            }

            rdr.Close();
            connection.Close();
        
        }
        string combinedQSql = "SELECT m.*, pi.first_name, pi.last_name, pi2.first_name AS teacher_first_name, pi2.last_name AS teacher_last_name, q.* FROM modules m INNER JOIN courses c ON c.course_id = m.courses_course_id INNER JOIN students s ON s.courses_course_id = c.course_id INNER JOIN aspnetusers u ON u.Id = s.aspnetusers_Id INNER JOIN teachers t ON t.modules_module_id = m.module_id INNER JOIN personal_info pi ON pi.aspnetusers_Id = s.aspnetusers_Id INNER JOIN personal_info pi2 ON pi2.aspnetusers_Id = t.aspnetusers_Id LEFT JOIN links_quiz q ON q.modules_module_id = m.module_id WHERE u.Id = '" + userId.Result.ToString() + "'";
        string combinedASql = "SELECT m.*, pi.first_name, pi.last_name, pi2.first_name AS teacher_first_name, pi2.last_name AS teacher_last_name, a.* FROM modules m INNER JOIN courses c ON c.course_id = m.courses_course_id INNER JOIN students s ON s.courses_course_id = c.course_id INNER JOIN aspnetusers u ON u.Id = s.aspnetusers_Id INNER JOIN teachers t ON t.modules_module_id = m.module_id INNER JOIN personal_info pi ON pi.aspnetusers_Id = s.aspnetusers_Id INNER JOIN personal_info pi2 ON pi2.aspnetusers_Id = t.aspnetusers_Id LEFT JOIN links_assignments a ON a.modules_module_id = m.module_id WHERE u.Id = '" + userId.Result.ToString() + "'";
        using (MySqlCommand command = new MySqlCommand(combinedQSql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(combinedQSql, connection);
            sqlcmd.CommandText = combinedQSql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];

                LinksQuiz quiz = new LinksQuiz();
                //quiz.ModulesModuleId = (Int32)rdr["modules_module_id"];
                quiz.LinkId = rdr["link_id"] == DBNull.Value ? 0 : (Int32)rdr["link_id"];
                quiz.Quizzes = rdr["quizzes"].ToString();
                quizModules.Add(quiz);
            }

            rdr.Close();
            connection.Close();
        }

        using (MySqlCommand command = new MySqlCommand(combinedASql, connection))
        {
            connection.Open();
            MySqlCommand sqlcmd = new MySqlCommand(combinedASql, connection);
            sqlcmd.CommandText = combinedASql;
            sqlcmd.CommandType = CommandType.Text;
            MySqlDataReader rdr = sqlcmd.ExecuteReader();
            while (rdr.Read())
            {
                Module mod = new Module();
                mod.ModuleId = (Int32)rdr["module_id"];
                mod.ModuleName = rdr["module_name"].ToString();
                mod.ModuleDescription = rdr["module_description"].ToString();
                mod.ModuleDuration = (Int32)rdr["module_duration"];
                mod.CoursesCourseId = (Int32)rdr["courses_course_id"];

                LinksAssignment asgn = new LinksAssignment();
                //asgn.ModulesModuleId = (Int32)rdr["modules_module_id"];
                asgn.AssignmentId = rdr["assignment_id"] == DBNull.Value ? 0 : (Int32)rdr["assignment_id"];
                asgn.Assignments = rdr["assignments"].ToString();
                asgnModules.Add(asgn);
            }

            rdr.Close();
            connection.Close();
        }

   }

    
   @*Take Quiz Modal Dialog*@
    private void TakeQuizDialog(List<LinksQuiz> quizModule)
    {

        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<TakeQuizDialog>("Take Quiz",  options);

    }

    @*Take Quiz Modal Dialog*@
    private void AssignmentsDialog(List<LinksAssignment> asgnModule)
    {
        var options = new MudBlazor.DialogOptions { };
        DialogService.Show<TakeQuizDialog>("Take Assignemnt",  options);
    }

}