@page "/PersonalInfo"
@using System.Globalization;
@using System.Text;
@using Universitile01.Data;
@inject IDialogService DialogService
@using Universitile01.Models;
@using Universitile01.Services;
@inject UniversitiledatabaseContext Db
@inject TeacherService TeacherService
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>dashboard</PageTitle>

<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link href="https://fonts.googleapis.com/css?family=Open+Sans:300i,400" rel="stylesheet">
</head>

<body>


	@*
	////////////////////////
	////////////////////////
	////////////////////////
	AVATAR AND PERSONAL INFO
	////////////////////////
	////////////////////////
	////////////////////////
	*@
	<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0" Style="background-color:black">

		<AuthorizeView Roles="Student, Teacher">
			<Authorized>
				<RadzenColumn Size="2" Style="background-color:black;">
					<MudAvatar Style="height:7rem; width:7rem;">VK</MudAvatar>
				</RadzenColumn>
				<RadzenColumn Size="10" Style="background-color:black">
					Info
				</RadzenColumn>
			</Authorized>
		</AuthorizeView>

	</RadzenRow>

	<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0" Style="background-color:black">
		<RadzenColumn Size="12" Style="background-color:black">
			<MudTabs Elevation="10" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-10" Centered="true" Color="Color.Dark">

				
				@*//////////////////////////////////////////////////////
				///////////////////////STUDENTS///////////////////////
				//////////////////////////////////////////////////////*@
				
				<AuthorizeView Roles="Student">
					<Authorized>
						
						@*////////////////////////
						ATTENCANCE TAB
						////////////////////////*@
						
						<MudTabPanel Text="Attendance">
							<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
								<RadzenColumn Size="12">
									<RadzenChart>
										<RadzenDonutSeries Data="@revenue" CategoryProperty="Type" ValueProperty="Amount">
											<ChildContent>
												<RadzenSeriesDataLabels Visible="@showDataLabels" />
											</ChildContent>
											<TitleTemplate>
												<div class="rz-donut-content">
													<div style="color:white; font-size:1rem"><b>Attendance</b></div>
												</div>
											</TitleTemplate>
										</RadzenDonutSeries>
									</RadzenChart>
								</RadzenColumn>
							</RadzenRow>
						</MudTabPanel>
						@*
						////////////////////////
						GRADES TAB
						////////////////////////
						*@
				
					
				
@*						<MudTabPanel Text="Grades">
							<RadzenRow JustifyContent="JustifyContent.SpaceEvenly" AlignItems="Radzen.AlignItems.Center" Gap="0">
								@foreach (Module grade in modGrade)
								{

									<div style="border:solid; border-color:darkslategrey; width:400px; height:250px">
										<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
											<RadzenColumn Size="12" Style="justify-self:center; align-self:center; margin-bottom:-2vh">
												<RadzenText Style="width:100%; font-size:1rem"><center>@grade.ModuleName<br /><span style="font-size:1.5rem"><b>@grade.Grade</b></span></center></RadzenText>
											</RadzenColumn>
											<RadzenColumn Size="12" Style="justify-self:center; align-self:center">
												<RadzenRadialGauge Style="width: 100%; height: 200px;">
													<RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="100" TickPosition="GaugeTickPosition.Outside">
												<RadzenRadialGaugeScalePointer Value=@grade.Grade Length="0.6"  />
														<RadzenRadialGaugeScaleRange From="0" To="30" Fill="red" />
														<RadzenRadialGaugeScaleRange From="30" To="40" Fill="orange" />
														<RadzenRadialGaugeScaleRange From="40" To="100" Fill="green" />
													</RadzenRadialGaugeScale>
												</RadzenRadialGauge>
											</RadzenColumn>
										</RadzenRow>
									</div>
								}
							</RadzenRow>
						</MudTabPanel>*@
					</Authorized>
				</AuthorizeView>
				@*
				//////////////////////////////////////////////////////
				///////////////////////STUDENTS///////////////////////
				//////////////////////////////////////////////////////
				*@

				@*
				//////////////////////////////////////////////////////
				///////////////////////TEACHERS///////////////////////
				//////////////////////////////////////////////////////
				*@
				<AuthorizeView Roles="Teacher">
					<Authorized>
						@*
						////////////////////////
						STUDENTS TAB
						////////////////////////
						*@
					<MudTabPanel Text="Students">
							<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
								<RadzenColumn Size="12">
									<MudDataGrid T="PersonalInfo" Items="@studInfo" MultiSelection="false" ReadOnly="true" ShowFilterIcons="true" SortMode="SortMode.Multiple" Style="background-image:linear-gradient(180deg, rgb(83, 80, 56) 0%, #1d1d1d 90%)" Height="62vh" FixedHeader="true">
										<ToolBarContent>
											<MudText Typo="Typo.h5" Style="color:white">Sessions Table</MudText>
										</ToolBarContent>
										<Columns>
											<PropertyColumn Property="st => st.FirstName" Title="First Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.MiddleName" Title="Middle Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.LastName" Title="Last Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.Sex" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.Landline" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.Mobile" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											@*<PropertyColumn Property="st => st.Aspnetusers.Email" Title="Email" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="st => st.Aspnetusers.CoursesCourses" Title="Course" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />*@
										</Columns>
									</MudDataGrid>
								</RadzenColumn>
							</RadzenRow>
						</MudTabPanel>
						@*
						////////////////////////
						TEACHERS TAB
						////////////////////////
						*@
						<MudTabPanel Text="Teachers">
							<RadzenRow JustifyContent="JustifyContent.Center" AlignItems="Radzen.AlignItems.Center" Gap="0">
								<RadzenColumn Size="12">
									<MudDataGrid T="PersonalInfo" Items="@teacherInfo" MultiSelection="false" ReadOnly="true" ShowFilterIcons="true" SortMode="SortMode.Multiple" Style="background-image:linear-gradient(180deg, rgb(83, 80, 56) 0%, #1d1d1d 90%)" Height="62vh" FixedHeader="true">
										<ToolBarContent>
											<MudText Typo="Typo.h5" Style="color:white">Sessions Table</MudText>
										</ToolBarContent>
										<Columns>
											<PropertyColumn Property="tch => tch.FirstName" Title="First Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="tch => tch.MiddleName" Title="Middle Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="tch => tch.LastName" Title="Last Name" Sortable="true" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="tch => tch.Sex" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="tch => tch.Landline" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
											<PropertyColumn Property="tch => tch.Mobile" Sortable="false" Filterable="true" CellStyle="color:white" HeaderStyle="color:black" />
										</Columns>
									</MudDataGrid>
								</RadzenColumn>
							</RadzenRow>
						</MudTabPanel>
					</Authorized>
				</AuthorizeView>
				@*
				//////////////////////////////////////////////////////
				///////////////////////TEACHERS///////////////////////
				//////////////////////////////////////////////////////
				*@

			</MudTabs>
		</RadzenColumn>
	</RadzenRow>

</body>

@code
{
	private string connect = "Server=universtile.mysql.database.azure.com;User ID=azureuser;Password=7TI2K6O0O1ZL6SIUE6BDMGLDK*;Database=universitiledatabase;SslMode=Required;SslCa=DigiCertGlobalRootCA.crt.pem;TlsVersion=TLS 1.2";
	private string userId;
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	private List<Module> modGrade = new List<Module>();
	private List<Module> stModules = new List<Module>();
	private List<PersonalInfo> studInfo = new List<PersonalInfo>();

	//Grades
	private List<RevenueData> revenue = new List<RevenueData>
	{
		new RevenueData { Type = "Type 1", Amount = 50 },
		new RevenueData { Type = "Type 2", Amount = 30 },
		new RevenueData { Type = "Type 3", Amount = 20 },
	};

	private bool showDataLabels = true;

	public class RevenueData
	{
		public string Type { get; set; }
		public int Amount { get; set; }
	}
	private List<PersonalInfo> teacherInfo = new List<PersonalInfo>();
	////////



	protected override async Task OnInitializedAsync()
	{
		var userId = getUserId();
		async Task<string> getUserName()
		{
			var user = (await authenticationStateTask).User;
			return user.Identity.Name;
		}
		async Task<string> getUserId()
		{
			var user = (await authenticationStateTask).User;
			var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
			return userid;
		}
		string gradessql = "SELECT m.* FROM modules m INNER JOIN teachers s ON m.module_id = s.modules_module_id INNER JOIN aspnetusers u ON s.aspnetusers_Id = u.Id WHERE u.Id ='" + userId.Result.ToString() + "'";
		MySqlConnection connection = new MySqlConnection(connect);
		using (MySqlCommand command = new MySqlCommand(gradessql, connection))
		{
			connection.Open();
			MySqlCommand sqlcmd = new MySqlCommand(gradessql, connection);
			sqlcmd.CommandText = gradessql;
			sqlcmd.CommandType = CommandType.Text;
			MySqlDataReader rdr = sqlcmd.ExecuteReader();
			while (rdr.Read())
			{

				Module mod = new Module();
				mod.ModuleId = (Int32)rdr["module_id"];
				mod.ModuleName = rdr["module_name"].ToString();
				mod.ModuleDescription = rdr["module_description"].ToString();
				mod.ModuleDuration = (Int32)rdr["module_duration"];
				//mod.Grade = rdr["grade"].ToString();
				mod.CoursesCourseId = (Int32)rdr["courses_course_id"];
				modGrade.Add(mod);
			}
			
			rdr.Close();
			connection.Close();
		}
		string combinedSql = "SELECT pi.*, m.module_name FROM personal_info pi INNER JOIN students s ON s.aspnetusers_Id = pi.aspnetusers_Id INNER JOIN courses c ON c.course_id = s.courses_course_id INNER JOIN modules m ON m.courses_course_id = c.course_id INNER JOIN teachers t ON t.modules_module_id = m.module_id WHERE t.aspnetusers_Id = '" + userId.Result.ToString() + "'";
		using (MySqlCommand command = new MySqlCommand(gradessql, connection))
		{
			connection.Open();
			MySqlCommand sqlcmd = new MySqlCommand(combinedSql, connection);
			sqlcmd.CommandText = combinedSql;
			sqlcmd.CommandType = CommandType.Text;
			MySqlDataReader rdr = sqlcmd.ExecuteReader();
			while (rdr.Read())
			{
				PersonalInfo pers = new PersonalInfo();
				pers.FirstName = rdr["first_name"].ToString();
				pers.LastName = rdr["last_name"].ToString();
				if (!studInfo.Any(personalInfo => personalInfo.FirstName == pers.FirstName && personalInfo.LastName == pers.LastName))
					studInfo.Add(pers);

				Module mod = new Module();
				mod.ModuleName = rdr["module_name"].ToString();
				if (!stModules.Any(module => module.ModuleName == mod.ModuleName))
					stModules.Add(mod);
			}

			rdr.Close();
			connection.Close();




		}
		string teachsql = "SELECT pi.* FROM personal_info pi INNER JOIN students s ON s.aspnetusers_Id = pi.aspnetusers_Id INNER JOIN courses c ON c.course_id = s.courses_course_id INNER JOIN modules m ON m.courses_course_id = c.course_id INNER JOIN teachers t ON t.modules_module_id = m.module_id WHERE t.aspnetusers_Id ='" + userId.Result.ToString() + "'";
		using (MySqlCommand command = new MySqlCommand(teachsql, connection))
		{
			connection.Open();
			MySqlCommand sqlcmd = new MySqlCommand(teachsql, connection);
			sqlcmd.CommandText = teachsql;
			sqlcmd.CommandType = CommandType.Text;
			MySqlDataReader rdr = sqlcmd.ExecuteReader();
			while (rdr.Read())
			{
				PersonalInfo teach = new PersonalInfo();
				teach.InfoId = (Int32)rdr["info_id"];
				teach.DateOfBirth = (DateTime)rdr["date_of_birth"];
				teach.Sex = (sbyte)rdr["sex"];
				teach.FirstName = rdr["first_name"].ToString();
				teach.LastName = rdr["last_name"].ToString();
				teach.MiddleName = rdr["middle_name"].ToString();
				teach.Landline = rdr["landline"].ToString();
				teach.Mobile = rdr["mobile"].ToString();
				teach.AspnetusersId = rdr["aspnetusers_Id"].ToString();
				if (!teacherInfo.Any(personalInfo => personalInfo.InfoId == teach.InfoId))
					teacherInfo.Add(teach);
			}
			rdr.Close();
			connection.Close();
		}
	}
}
